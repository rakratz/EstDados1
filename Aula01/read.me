# Introdução a Linguagem C++
Prof. Me. Ricardo de Andrade Kratz
Ver 1.0 Agosto 2025


## Surgimento do C e C++

📌 Origens
- Início da década de 1980, nos laboratórios da AT&T Bell Labs.
- Criada por Bjarne Stroustrup, como uma extensão da linguagem C.
- Objetivo: adicionar programação orientada a objetos ao poder e eficiência do C.

📅 Linha do Tempo Resumida
Ano	        Marco Histórico
1972	    Linguagem C criada por Dennis Ritchie.
1983	    Surge o C com Classes (versão inicial do C++).
1985	    Publicação do primeiro livro "The C++ Programming Language".
1990	    C++ se torna padrão na indústria para desenvolvimento de sistemas.
1998	    Primeira padronização oficial: C++98.
2003	    Revisão técnica: C++03.
2011	    C++11: grandes melhorias (auto, lambda, smart pointers).
2014/2017	Novas versões: C++14 e C++17 – mais funcionalidades.
2020/2023	C++20 e C++23: suporte a ranges, corrotinas, módulos e mais.

🧠 Principais Características do C++
- Combina programação estruturada (imperativa) com programação orientada a objetos (OOP).
- Permite controle total de memória com uso direto de ponteiros.
- Suporta programação genérica com uso de templates.
- Pode ser usado tanto para sistemas embarcados quanfto para aplicações de alto desempenho 
  (compiladores, jogos, simuladores).

🧩 Por que estudar C++ hoje?
- Excelente base para entender estrutura de dados e algoritmos.
- Amplamente utilizado em sistemas operacionais, jogos, automação e bancos de dados.
- Continua sendo uma das linguagens mais influentes na computação moderna.


## Principais Comandos

📤 Saída de dados – cout
Usamos cout para exibir informações no terminal.

'' cpp

#include <iostream>
using namespace std;

int main() {
    cout << "Olá, mundo!" << endl;
    cout << "Resultado da soma: " << 2 + 3 << endl;
    return 0;
}
/*
    cout → comando de saída (Console OUT)
    << → operador de inserção (manda para a saída)
    endl → pula para a próxima linha (end line)
*/


---

## 🧠 **O que é `cin` em C++?**

O `cin` é o **comando de entrada padrão** em C++.
Ele significa **"Console IN"** e é usado para **ler dados digitados pelo usuário no teclado**, geralmente armazenando esses dados em variáveis.

🔧 Ele funciona em conjunto com o operador de **extração** `>>`, que direciona o valor digitado **para uma variável**.

---

### ✅ **Sintaxe básica:**

```cpp
cin >> variavel;
```

Isso faz com que o programa espere o usuário digitar algo e aperte **Enter**. O valor digitado será armazenado na variável indicada.

---

## 📌 Exemplo prático com `cin` e `cout`

```cpp
#include <iostream>
#include <locale>
#include <windows.h> // Para terminal UTF-8 no Windows

using namespace std;

int main() {
    setlocale(LC_ALL, "Portuguese");

    string nome;
    int idade;

    cout << "Digite seu nome: ";
    cin >> nome;

    cout << "Digite sua idade: ";
    cin >> idade;

    cout << endl;
    cout << "Olá, " << nome << "! Você tem " << idade << " anos." << endl;

    return 0;
}
```

---

### 🧪 Saída esperada:

```
Digite seu nome: Ana
Digite sua idade: 21

Olá, Ana! Você tem 21 anos.
```

> 📝 Obs: se o nome tiver **espaços**, como "Ana Maria", só a palavra "Ana" será capturada. Para ler linhas inteiras com espaço, usamos `getline(cin, nome)` — posso te mostrar isso também se quiser.

---

## ✳️ **Operadores Aritméticos em C++**

Os **operadores `+`, `-`, `*`, `/`** são utilizados para realizar operações 
matemáticas básicas com variáveis e constantes. Eles funcionam da mesma forma 
que na matemática tradicional:
| -------- | ------------- | ------- | -------------------------------|
| Operador | Nome          | Exemplo | Resultado                      |
| -------- | ------------- | ------- | -------------------------------|
| `+`      | Soma          | `a + b` | Soma de `a` e `b`              |
| `-`      | Subtração     | `a - b` | Diferença entre `a` e `b`      |
| `*`      | Multiplicação | `a * b` | Produto de `a` e `b`           |
| `/`      | Divisão (int) | `a / b` | Divisão de `a` por `b`         |
| `%`      | Resto (int)   | `a % b` | Resto da Divisão de `a` por `b`|
| -------- | ------------- | ------- | -------------------------------|


---

## 🧮 **Exemplo em C++:**

```cpp
#include <iostream>
using namespace std;

int main() {
    int a = 10, b = 3;

    cout << "Soma: " << a + b << endl;
    cout << "Subtração: " << a - b << endl;
    cout << "Multiplicação: " << a * b << endl;
    cout << "Divisão: " << a / b << endl;

    return 0;
}
```

### Saída:

```
Soma: 13
Subtração: 7
Multiplicação: 30
Divisão: 3
```

> ⚠️ **Atenção:** Ao dividir dois inteiros (`int / int`), o resultado será também um inteiro. Para obter valor decimal, é necessário usar `float` ou `double`.

---

## 🔄 **Importância nas Estruturas de Dados**

Esses operadores são utilizados:

* Para **navegar em vetores e listas** (ex: `i + 1`, `i - 1`)
* Para **realizar cálculos com índices e posições**
* Em **simulações**, como cálculo de prioridades ou pesos
* Para **operações entre elementos de nós**, em estruturas encadeadas
* Para **analisar condições e comparações** com operadores relacionais

---


### 🧠 **Operadores Aritméticos**

Esses operadores realizam operações matemáticas básicas:

| Operador | Significado   | Exemplo                    |
| -------- | ------------- | -------------------------- |
| `+`      | Adição        | `x + y` soma `x` e `y`     |
| `-`      | Subtração     | `x - y` subtrai `y` de `x` |
| `*`      | Multiplicação | `x * y`                    |
| `/`      | Divisão       | `x / y`                    |
| `%`      | Resto         | `x % y`                    |

---

### 🔍 **Operadores Relacionais**

Usados para **comparações**, retornando `true` ou `false`:

| Operador | Significado      | Exemplo  |
| -------- | ---------------- | -------- |
| `<`      | Menor que        | `x < y`  |
| `<=`     | Menor ou igual a | `x <= y` |
| `>`      | Maior que        | `x > y`  |
| `>=`     | Maior ou igual a | `x >= y` |
| `==`     | Igual a          | `x == y` |
| `!=`     | Diferente de     | `x != y` |

---

### 🔁 **Operadores de Incremento e Decremento**

Servem para aumentar ou diminuir valores numéricos (geralmente inteiros):

| Operador | Significado     | Exemplo        |
| -------- | --------------- | -------------- |
| `++`     | Incremento (+1) | `x++` ou `++x` |
| `--`     | Decremento (-1) | `x--` ou `--x` |

> `x++` (pós-incremento) incrementa **após** o uso
> `++x` (pré-incremento) incrementa **antes** do uso

---

### 🔗 **Operadores Lógicos**

Utilizados em expressões booleanas, geralmente com `if` ou `while`:

| Operador | Significado      | Exemplo                              |                |         |   |         |
| -------- | ---------------- | ------------------------------------ | -------------- | ------- | - | ------- |
| `&&`     | E lógico (AND)   | `x > 0 && y > 0`                     |                |         |   |         |
| \`       |                  | \`                                   | OU lógico (OR) | \`x > 0 |   | y > 0\` |
| `!`      | NÃO lógico (NOT) | `!x` (inverte o valor lógico de `x`) |                |         |   |         |

---

### ✅ **Resumo Visual**

Você pode pensar em:

* `==` como uma pergunta: “É igual?”
* `!=` como “É diferente?”
* `&&` como “ambas as condições são verdadeiras?”
* `||` como “pelo menos uma é verdadeira?”
* `!` como “não é verdadeiro?”


## ✅ 1. Estrutura de Repetição `for`

### 👉 Para que serve?

O `for` é uma estrutura de repetição **controlada**. É usada quando você **sabe 
quantas vezes** o bloco de código precisa se repetir.

### 🧱 Sintaxe:

```cpp
for (inicialização; condição; incremento) {
    // bloco de código a ser repetido
}
```

### 📌 Exemplo:

```cpp
for (int i = 0; i < 5; i++) {
    cout << "Repetição número " << i << endl;
}
```

👆 Isso imprime:

```
Repetição número 0
Repetição número 1
Repetição número 2
Repetição número 3
Repetição número 4
```

* `i = 0` → começa no zero
* `i < 5` → repete enquanto for menor que 5
* `i++` → soma 1 a cada repetição

---

## ✅ 2. Vetores (Arrays)

### 👉 O que são?

Vetores são **estruturas de dados lineares** que armazenam **vários valores 
do mesmo tipo** em posições consecutivas da memória.

### 🧱 Declaração:

```cpp
int numeros[5];  // vetor de 5 inteiros
```

### 🛠️ Atribuição de valores:

```cpp
numeros[0] = 10;
numeros[1] = 20;
numeros[2] = 30;
numeros[3] = 40;
numeros[4] = 50;
```

### 📌 Com `for`:

```cpp
for (int i = 0; i < 5; i++) {
    cout << "Valor na posição " << i << ": " << numeros[i] << endl;
}
```

---

## ✅ 3. Condição `if`

### 👉 Para que serve?

O `if` executa um bloco de código **apenas se uma condição for verdadeira**.

### 🧱 Sintaxe:

```cpp
if (condição) {
    // bloco se for verdadeiro
}
```

### 📌 Exemplo:

```cpp
int idade = 18;

if (idade >= 18) {
    cout << "Maior de idade!" << endl;
}
```

### Com `else`:

```cpp
if (idade >= 18) {
    cout << "Maior de idade" << endl;
} else {
    cout << "Menor de idade" << endl;
}
```

---

## 🔁 Exemplo integrando os 3:

```cpp
int notas[5] = {7, 8, 9, 5, 6};

for (int i = 0; i < 5; i++) {
    if (notas[i] >= 7) {
        cout << "Aluno " << i << " aprovado com nota " << notas[i] << endl;
    } else {
        cout << "Aluno " << i << " reprovado com nota " << notas[i] << endl;
    }
}


### 📌 `gets()` — **NÃO UTILIZAR EM C++ MODERNO**

> 🔴 **Obsoleto e inseguro!**
> A função `gets()` pertence à linguagem C e foi removida do padrão C++11 devido a 
**problemas de segurança** (não verifica o tamanho da entrada, podendo causar estouro de buffer).

#### ❌ Exemplo (não recomendado):

```cpp
char nome[50];
gets(nome);  // PERIGOSO: não verifica limite
```

---

### ✅ `getline()` — **RECOMENDADO EM C++**

> 📘 Usado para **ler uma linha inteira de texto**, inclusive com espaços.
> Funciona com **strings do tipo `std::string`** e evita problemas de segurança.

#### ✅ Sintaxe:

```cpp
getline(cin, variavel_string);
```

---

### ✅ Exemplo completo com `getline()`:

```cpp
#include <iostream>
#include <string>
using namespace std;

int main() {
    string nomeCompleto;

    cout << "Digite seu nome completo: ";
    getline(cin, nomeCompleto);  // Lê a linha inteira, incluindo espaços

    cout << "Olá, " << nomeCompleto << "!" << endl;
    return 0;
}
```

---

### ℹ️ Diferença entre `cin` e `getline()`:

* `cin >> nome` → **lê até o primeiro espaço**.
* `getline(cin, nome)` → **lê a linha completa até o ENTER**.

#### 🔍 Exemplo comparativo:

```cpp
string nome;
cin >> nome;
// Se digitar "Maria Silva", ele pega só "Maria"
```
